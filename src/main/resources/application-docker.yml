spring:
  datasource:
    url: ${DB_URL}&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      register-mbeans: true
      metrics-name: hikaricp
      pool-name: "UserAppDockerDB-Pool"
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false  # Docker에서는 로그 최소화
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQLDialect
        jdbc:
          time_zone: Asia/Seoul  # 한국 시간대 설정
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 4
          min-idle: 2
          max-wait: -1ms
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      file-size-threshold: 2KB
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${CORS_ALLOWED_ORIGINS}/login/oauth2/code/google
            scope:
              - email
              - profile
        provider:
          google:
            user-name-attribute: email
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_APP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
          debug: false

# Exchange API
exchange:
  api-key: ${EXCHANGE_API_KEY}

# 파일 업로드 설정 (Docker 볼륨 마운트)
file:
  upload:
    path: uploads

# CORS 설정
cors:
  allowed:
    origins: ${CORS_ALLOWED_ORIGINS}

# Actuator 설정 (Prometheus 메트릭 노출)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
    prometheus:
      enabled: true
  metrics:
    enable:
      hikaricp: true
    distribution:
      percentiles-histogram:
        "http.server.requests": true
        hikaricp.connections.creation: true
        hikaricp.connections.usage: true
      percentiles:
        "http.server.requests": 0.5, 0.95, 0.99
        hikaricp.connections.creation: 0.5, 0.95, 0.99
        hikaricp.connections.usage: 0.5, 0.95, 0.99
      slo:
        "http.server.requests": 50ms, 100ms, 200ms, 500ms, 1s, 2s, 5s
  prometheus:
    metrics:
      export:
        enabled: true

# Docker 환경에서 로깅 레벨 조정
logging:
  level:
    com.example: INFO
    org.springframework: WARN
    org.hibernate: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# 서버 설정
server:
  port: 8081

