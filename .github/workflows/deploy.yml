name: Deploy User App to EC2

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          echo "=== Secrets 확인 ==="
          echo "EC2_HOST 설정됨: ${{ secrets.EC2_HOST != '' }}"
          echo "EC2_USER 설정됨: ${{ secrets.EC2_USER != '' }}"
          echo "EC2_PRIVATE_KEY 설정됨: ${{ secrets.EC2_PRIVATE_KEY != '' }}"
          
          if [ -z "${{ secrets.EC2_HOST }}" ] || [ -z "${{ secrets.EC2_USER }}" ] || [ -z "${{ secrets.EC2_PRIVATE_KEY }}" ]; then
            echo "❌ 필수 secrets가 설정되지 않았습니다!"
            exit 1
          fi
          
          echo "=== SSH 디렉토리 생성 ==="
          mkdir -p ~/.ssh
          echo "SSH 디렉토리 생성 완료"
          
          echo "=== SSH 키 파일 생성 ==="
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "SSH 키 파일 생성 완료"
          
          echo "=== SSH 키 권한 설정 ==="
          chmod 600 ~/.ssh/id_rsa
          echo "SSH 키 권한 설정 완료"
          
          echo "=== 호스트 키 스캔 생략 ==="
          echo "SSH 연결 시 자동으로 호스트 키를 수락하도록 설정됨"
          
          echo "=== SSH 키 확인 ==="
          ls -la ~/.ssh/id_rsa
          head -1 ~/.ssh/id_rsa
          echo "SSH 키 크기: $(wc -c < ~/.ssh/id_rsa) bytes"
          
          echo "=== 호스트 연결 테스트 ==="
          ping -c 3 ${{ secrets.EC2_HOST }} || echo "호스트 연결 실패"
          
          echo "=== SSH 연결 테스트 ==="
          timeout 10 ssh -i ~/.ssh/id_rsa \
              -o ConnectTimeout=5 \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o BatchMode=yes \
              -o LogLevel=ERROR \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH 연결 성공!'" || {
              echo "SSH 연결 실패. 에러 코드: $?"
              echo "=== SSH 키 첫 줄 확인 ==="
              head -1 ~/.ssh/id_rsa
              echo "=== SSH 키 마지막 줄 확인 ==="
              tail -1 ~/.ssh/id_rsa
              echo "=== SSH 키 형식 검증 ==="
              ssh-keygen -l -f ~/.ssh/id_rsa || echo "SSH 키 형식 오류"
              exit 1
          }

      - name: Deploy User application
        run: |
          ssh -i ~/.ssh/id_rsa \
              -o ConnectTimeout=60 \
              -o ServerAliveInterval=30 \
              -o ServerAliveCountMax=3 \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "=== User 애플리케이션 배포 시작 ==="
          
          # 기존 User 프로세스 종료 (8081 포트)
          if pgrep -f "server.port=8081" > /dev/null; then
            echo "실행 중인 User 프로세스 발견, 종료 중..."
            pkill -f "server.port=8081"
            sleep 3
          else
            echo "실행 중인 User 프로세스 없음"
          fi
          
          # User 프로젝트 디렉토리로 이동 또는 클론
          if [ -d "exchange_rate" ]; then
            cd exchange_rate
            git pull origin master
          else
            git clone https://github.com/${{ github.repository }}.git exchange_rate
            cd exchange_rate
          fi
          
          # 빌드
          ./gradlew clean build -x test
          
          # 환경변수 설정
          export DB_URL="${{ secrets.DB_URL }}"
          export CORS_ALLOWED_ORIGINS="${{ secrets.CORS_ALLOWED_ORIGINS }}"
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export GMAIL_USERNAME="${{ secrets.GMAIL_USERNAME }}"
          export GMAIL_APP_PASSWORD="${{ secrets.GMAIL_APP_PASSWORD }}"
          export EXCHANGE_API_KEY="${{ secrets.EXCHANGE_API_KEY }}"
          export S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}"
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          export GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
          export GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
          export SPRING_PROFILES_ACTIVE="prod"
          
          # 환경변수 파일 생성
          echo "DB_URL=$DB_URL" > ~/.env_user
          echo "DB_USERNAME=$DB_USERNAME" >> ~/.env_user
          echo "DB_PASSWORD=$DB_PASSWORD" >> ~/.env_user
          echo "GMAIL_USERNAME=$GMAIL_USERNAME" >> ~/.env_user
          echo "GMAIL_APP_PASSWORD=$GMAIL_APP_PASSWORD" >> ~/.env_user
          echo "EXCHANGE_API_KEY=$EXCHANGE_API_KEY" >> ~/.env_user
          echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> ~/.env_user
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> ~/.env_user
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> ~/.env_user
          echo "AWS_REGION=$AWS_REGION" >> ~/.env_user
          echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> ~/.env_user
          echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> ~/.env_user
          echo "SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE" >> ~/.env_user
          echo "CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS" >> ~/.env_user
          
          # User 애플리케이션 실행 (8081 포트)
          nohup java -jar build/libs/exProject-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod --server.port=8081 > user_app.log 2>&1 &
          
          sleep 15
          
          echo "=== User 애플리케이션 배포 완료 ==="
          ps aux | grep "server.port=8081" | grep -v grep || echo "User 프로세스 없음"
          netstat -tlnp | grep :8081 || echo "포트 8081이 열려있지 않음"
          tail -30 user_app.log
          EOF